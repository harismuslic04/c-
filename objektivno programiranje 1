// #include<string.h>

// /*
// 	Realizovati klasu Student koja ima privatne atribute ime,prezime i broj indeksa.
// 	Metode: inicijalizacija(char* i,char* p,int b) postavlja vrednosti atribute na vrednosti koje dolazi kao argumenti i ispis koja ispisuje vrednosti atributa.
// */

// class Student
// {
// 	char ime[10];
// 	char prezime[20];
//     int	br_indeksa;
// public:
// 	void inic(char* i,char* p,int b);          //prototip metor=de za inicijalizaciju podataka o studentu
// 	void ispis();                                       //protip f-je za ispis  podataka
// } ;
// /**
//  * Definicije metoda ciji su prototipovi navedeni u f-ji
//  * povratni_tip ime_klase::ime_metode(tip1 arg1,tip2 agr2,..){ naredbe;}
//  **/

// void Student::inic(char* i,char* p,int b){
//    strcpy(ime,i); //f-ja iz biblioteke string.h koja kopira string i u string ime
//    strcpy(prezime,p);
//    br_indeksa=b;
// }
// void Student::ispis(){
// 	cout<<ime<<" "<<prezime<<" "<<br_indeksa<<endl;
// }

// void main(){
//   Student informaticar;
//   informaticar.inic("Miki","Maus",9);
//   informaticar.ispis();

// }

// #include<iostream.h>
// #include<string.h>
/**
 * unutar metode adresa objekta koji je pozvao  je dostupna preko  kljucne reci this
 * this- adresa ojekta koji je pozvao metodu
 * *this-sam objekat
 **/

/*
	Reazlivati klasu DvaZnaka koja ima dva javna atributa koji su tipa karakteri
	Metode: inicijalizacija(z1,z2),uvecaj() koja uvecava znakove tj dobijamo sledece karaktere u ASCII tabeli;
	ispis() metoda koja ispisuje koji su trenutni znaci
	adresaoObjekta() ispisuje adresu objekta koji je pozvao
// */
// class DvaZnaka
// {
// public:
// 	char c1;//prvi atribut znakovnog tipa
// 	char c2;//drugi atribut znakovnog tipa
// public:
// 	void inic(char z1,char z2);          //prototip metode za inicijalizaciju dva znaka
// 	void uvecaj();                       //prototip metode za uvecavanje znakova(dobijamo sledece karaktere po ASSCI kodu)
// 	void ispis();                         //prototip metode za ispis  podataka pomocu objekta this
// 	void adresaObjekta();                 //prototip f-je za vracanje adrese objekta koji je pozvao metodu
	
// };
/**
 * Definicije metoda ciji su prototipovi navedeni u f-ji
 * povratni_tip ime_klase::ime_metode(tip1 arg1,tip2 agr2,..){ naredbe;}
 **/
// void DvaZnaka::adresaObjekta(){ 

// 	cout<<this<<endl;
	
// 	}
// //pristup podacima klase preko objekta *this 
// void DvaZnaka::inic(char z1,char z2){
// 	this->c1=z1;
// 	this->c2=z2;
// }
// void DvaZnaka::uvecaj(){
//     this->c1++;
// 	this->c2++;

// }
// void DvaZnaka::ispis(){
// 	cout<<" Znak1 = "<<this->c1<<" Znak2 = "<<this->c2<<endl;
// }

// void main(){
//   DvaZnaka inicijali;
//   inicijali.inic('U','M');
//   cout<<"Promenljiva inicijali nalazi se na adresi "<<&inicijali<<endl;
//   cout<<"Ovo potvrdjuje i nasa metoda adresa :";
//   inicijali.adresaObjekta();
//   inicijali.uvecaj();
//   cout<<"Posle uve'anja novi inicijali su";
//   inicijali.ispis();
// }



// #include<math.h>
// /**
//  ** In line f-je preporuka kompajleru da se na mestu poziva f-je umetne njen kod cime se vrsi usteda.
//  ** D je f-ja inline oznacavamo prefiksom inline i koristi se samo kod jako malih  f-ja
//  ** f-je koju su definisane unutar definicije klase su inline
// **/
// /*
//    Realizovati klasu Trougao koja ima tri privatna atributa a,b i c (realne vrednosti)
//    i metode: inicijalizacija(a,b,c) postavlja vrednosti atributa na vrednosti argumenata;
//    pisi - metoda koja ispisuje podatke o atributima a,b i c;
//    P() - metoda koja racuna povrsinu trougla; O() racuna i vraca obim trougla;
// */
// class Trougao{
// 	double a,b,c;         //atributi klase stranice trougla
// public:
// 	void inic(double a,double b, double c); //prototip metode za inicijalizaciju atributa
// 	void pisi();                            //prototip metode za ispis
// 	double P();                             //prototip metode za racunanje povrsine
// 	double O(){
// 	return(a+b+c);
// 	}
// };
// void Trougao::inic(double a,double b, double c){
//    this->a=a;  // koristi se pokazivac this jer atributi i argumenti imaju isto ime
//    this->b=b;
//    this->c=c;
// }
// void Trougao::pisi(){
//   cout<<"Duzine stranica su a="<<a<<endl<<"\t\t   b="<<b<<endl<<"\t\t   c="<<c<<endl;

// }
// double Trougao::P(){
//    double s=(a+b+c)/2;
//    return sqrt(s*(s-a)*(s-b)*(s-c));
// }
// void main(){
// Trougao t;
// t.inic(5,3,7);
// t.pisi();
// cout<<"O= "<<t.O()<<" P= "<<t.P()<<endl;

// }


// Opisati klasu stack koja sadrži niz znakova  duzinu i vrh kao i realizovane sledece metode:
// stack-konstruktor sa podrazumevajućom dužinom
// stack-konstruktor sa datim stringom i dužinom
// reset-prazni stek
// push –stavlja znak u stek
// pop-uzima vrednost sa vrha steka
// top_of vraca vrednost sa vrha steka
// empty-proverava da li je stek prazan
// full-proverava da li je stek pun


// #include<iostream.h>
// #include<math.h>
// class Stack
// {
//    char *s;                       //dinamicko polje niza karaktera
//    int max_len;                   //maksimalna duzina niza
//    int top;                       //indeks elementa koji je na vrhu steka
// public:
// 	Stack(int size);                           //prototip konstruktora sa argumenata sa podrazumevanim vrednostima
//     Stack(int size,const char str[]);               //prototip konstruktora sa argumenata
//     ~Stack(){ delete []s;}                          //destruktor brise dinamicki niz
//     void reset();                                   //prototitp metode koja prazni stek
//     void push(char c);                              //prototip metode koja postavlja karakter na stek
// 	char pop();                                     //prototip metode koja uzima vrednost sa vrha steka
//     char top_of();                                  //prototip metode koja vraca vrednost sa vrha steka
//     bool empty () const;                             //prototip metode koja ispituje da li je stek prazan
//     bool full();                                     //prototip metode koja ispituje da lismo ispunili stek do vrha
// 	} ;
// 	Stack::Stack(int size){
// 	s=new char(size);
// 	max_len=size;
// 	top=-1;}

// 	Stack::Stack(int size,const char str[]){
// 	s=new char(size);
// 	max_len=size;
//     for(int i=0;i<size;i++)
//     s[i]=str[i];
// 	top=size-1;}
// 	void Stack::reset(){
// 	  top=-1;
// 	  }
//     void Stack::push(char c){
// 	   cout<<top<<endl<<max_len<<endl;
// 		s[++top]=c;
	
// 	}
// 	char Stack::pop(){
// 	    return s[top--];
	
// 	}
// 	char Stack::top_of(){
// 	    return s[top];
	
// 	}
// 	bool Stack::full(){
// 	    return top==max_len-1;
	
// 	}
// 	bool Stack::empty() const{
// 	    return top==-1;	
// 	}
	
// void main(){
// 	Stack s(3);
// 	char x;
// 	s.reset();
// 	cout<<"Unesite niz karaktera"<<endl;
// 	while(!s.full()){
// 		cin>>x;
// 	  if(x==EOF)
// 	   break;
// 	  else s.push(x);
// 	}
// 	cout<<"Niz karaktera koji je upisan u stek:"<<endl;
	
// 	while(!s.empty()){
// 		cout<<s.pop()<<endl;}
//     Stack s2(4,"ABCD");
//     while(!s2.empty()){
// 		 cout<<s2.pop()<<endl;
// 	}
// }

// using namespace std;
// #include<iostream>
// #include<string.h>
// class Tacka2{
// public:
// int x;
// int y;

//   Tacka2(){
//   cout<<"Napravljen je objekat na adresi"<<this<<endl ;}
//   Tacka2(int x,int y)
//   {this->x=x;
//    this->y=y;
//    cout<<"Napravljen je objekat na adresi"<<this<<endl;
//    cout<<"X="<<this->x<<endl;
//    cout<<"Y="<<this->y<<endl;
//    };
// };
// class Tacka3{
// int x;
// int y;
// int z;
// public:
//   Tacka3(){
//   cout<<"Napravljen je objekat na adresi"<<this<<endl ;}
//   Tacka3(int x,int y,int z)
//   {this->x=x;
//    this->y=y;
//    this->z=z;
//    cout<<"Napravljen je objekat na adresi"<<this<<endl;
//    cout<<"X="<<this->x<<endl;
//    cout<<"Y="<<this->y<<endl;
//    cout<<"Z="<<this->z<<endl;
//    };
//    Tacka3(Tacka2 t,int z){
//     this->x=t.x;
//     this->y=t.y;
// 	this->z=z;
// 	cout<<"Napravljen je objekat na adresi"<<this<<endl;
//    cout<<"X="<<this->x<<endl;
//    cout<<"Y="<<this->y<<endl;
//    cout<<"Z="<<this->z<<endl;
//    }
// };
// int main(){
//    Tacka3 teme,teme1(1,2,3);//Tacka3(),Tacka3 *this=&teme
//    Tacka2 teme2(4,5);
//    Tacka3 teme3(teme2,6);
// }


// using namespace std;
// #include<iostream>
// #include<string.h>
// #include<math.h>
// /* Za razliku od destruktor metode konstruktor moze sadrzati parametre
//  * kroz parametre konstruktura moguce je proslediti vrednosti polja objekta
//  * Jedna klasa moze imati vise konstruktora koji se razlikuju po tipu i 
//  * broju parametara koji  primaju 
//  */
// class Tacka
// {
// 	int x;
// 	int y;
// public:
// 	Tacka();                         //prototip  konstruktora bez argumenata
// 	Tacka(int a,int b);              //prototip  konstruktora sa parametrima za inicijalizaciju koordinata
// 	void translacija(int dx,int dy); //prototip funkcije za translaciju
// 	void pozicija();                 //prototip f-je za ispis  pozicije
// 	~Tacka();                        //prototip destruktora
// } ;
// /**
//  * Definicije metoda ciji su prototipovi navedeni u f-ji
//  * povratni_tip ime_klase::ime_metode(tip1 arg1,tip2 agr2,..){ naredbe;}
//  * 
//  **/
// Tacka::Tacka()
// {  x=0;
//    y=0;
//    cout<<"U telu smo konstruktor metode i kreiramo objekat na adresi"<<this;
// }
// Tacka::Tacka(int a,int b=0){
//    x=a;
//    y=b;
// }
// void Tacka::translacija(int dx, int dy){
//    x+=dx;
//    y+=dy;
// }
// void Tacka::pozicija(){
//   cout<<"(x,y)=("<<x<<","<<y<<")"<<endl;
// }
// Tacka::~Tacka(){
//   cout<<"Destruktor metoda  koja uklanja objekat sa pozicije"<<this<<endl;
// }
// /* Pozivom konstruktora sa parametrima moze se izvrsiti 
//  */
// int main(){
// Tacka tacka1(5,5); //poziv konastruktora sa argumenata
// Tacka tacka2(1,20);      //poziv konastruktora sa argumenata
// Tacka tacka3(7);         //poziv konastruktora sa argumenata ,b dobija podrazumevanu vrednost
// Tacka tacka4;            //poziv konastruktora bez argumenata
// cout<<"Tacka1";
// tacka1.pozicija();
// cout<<"Tacka2";
// tacka2.pozicija();
// cout<<"Tacka3";
// tacka3.pozicija();
// cout<<"Tacka4";
// tacka4.pozicija();
// }

// #include<iostream.h>
// #include<math.h>
// class Stack
// {
//    char *s;                       //dinamicko polje niza karaktera
//    int max_len;                   //maksimalna duzina niza
//    int top;                       //indeks elementa koji je na vrhu steka
// public:
// 	Stack(int size);                           //prototip konstruktora sa argumenata sa podrazumevanim vrednostima
//     Stack(int size,const char str[]);               //prototip konstruktora sa argumenata
//     ~Stack(){ delete []s;}                          //destruktor brise dinamicki niz
//     void reset();                                   //prototitp metode koja prazni stek
//     void push(char c);                              //prototip metode koja postavlja karakter na stek
// 	char pop();                                     //prototip metode koja uzima vrednost sa vrha steka
//     char top_of();                                  //prototip metode koja vraca vrednost sa vrha steka
//     bool empty () const;                             //prototip metode koja ispituje da li je stek prazan
//     bool full();                                     //prototip metode koja ispituje da lismo ispunili stek do vrha
// 	} ;
// 	Stack::Stack(int size){
// 	s=new char(size);
// 	max_len=size;
// 	top=-1;}

// 	Stack::Stack(int size,const char str[]){
// 	s=new char(size);
// 	max_len=size;
//     for(int i=0;i<size;i++)
//     s[i]=str[i];
// 	top=size-1;}
// 	void Stack::reset(){
// 	  top=-1;
// 	  }
//     void Stack::push(char c){
// 	   cout<<top<<endl<<max_len<<endl;
// 		s[++top]=c;
	
// 	}
// 	char Stack::pop(){
// 	    return s[top--];
	
// 	}
// 	char Stack::top_of(){
// 	    return s[top];
	
// 	}
// 	bool Stack::full(){
// 	    return top==max_len-1;
	
// 	}
// 	bool Stack::empty() const{
// 	    return top==-1;	
// 	}
	
// void main(){
// 	Stack s(3);
// 	char x;
// 	s.reset();
// 	cout<<"Unesite niz karaktera"<<endl;
// 	while(!s.full()){
// 		cin>>x;
// 	  if(x==EOF)
// 	   break;
// 	  else s.push(x);
// 	}
// 	cout<<"Niz karaktera koji je upisan u stek:"<<endl;
	
// 	while(!s.empty()){
// 		cout<<s.pop()<<endl;}
//     Stack s2(4,"ABCD");
//     while(!s2.empty()){
// 		 cout<<s2.pop()<<endl;
// 	}
// }

// #include<iostream.h>
// class Fibonaci
// {
//       public:
//       int n;
//       int *niz;
//       public:
//       Fibonaci()
//       {
//       cout<<"Unesite n"<<endl;
//       cin>>n;
//       niz = new int[n];
//       niz[0]=1;
//       niz[1]=1;
//       for(int i=2;i<n;i++)
//         niz[i]=niz[i-1]+niz[i-2];
//       }
//       Fibonaci(int n)
//       {
//       this->n=n;
//       niz = new int[this->n];
//       niz[0]=1;
//       niz[1]=1;
//       for(int i=2;i<n;i++)
//         niz[i]=niz[i-1]+niz[i-2];
//       }
//       Fibonaci(const Fibonaci &F)
//       {
//       this->n = F.n;
//       niz = new int[this->n];
//       for(int i=0;i<this->n;i++)
//        this->niz[i] = F.niz[i];
//       }
//       int suma()
//       {
//       int s=0;
//       for(int i=0;i<n;i++)
//         s += niz[i];
//       return s;
//       }
//       int vrednost(int i)
//       {
//        if(i > n)
//         return -1;
//        return niz[i-1];
//       }
//       void prosiri(int x)
//       {
//       int *pomocni;
//       pomocni = new int[n];
//       for(int i=0;i<n;i++)
//         pomocni[i] = niz[i];
//       delete [] niz;
//       n += x; // n uvecano za vrednost x
//       niz = new int[n];
//       for(int i=0;i<(n-x);i++)
//         niz[i] = pomocni[i];
//       for(int i=(n-x);i<n;i++)
//         niz[i] = niz[i-1] + niz[i-2];
//       }
//       ~Fibonaci()
//       {
//        delete [] niz;
//       }
// };
// int main()
// {
//     Fibonaci f1,f2(10);
//     f1.prosiri(10);
//     int i;
//     for(i=0;i<f1.n;i++)
//       cout<<f1.niz[i]<<endl;
//     cin>>i;
//     return 0;
// }

/*using namespace std;
#include<iostream>
#include<string.h>
#include<math.h>

class prava { 
private: int x1,y1, x2, y2; 
float d; 
public: 
prava(){ 
x1 = 0; y1 = 0; x2 = 10; y2 = 10; } 
prava(int x1, int y1, int x2, int y2){ 
this->x1=x1; this->y1=y1; this->x2=x2; this->y2=y2; }
void setx1 (int a){x1=a;} 
void sety1 (int a){y1=a;} 
void setx2 (int a){x2=a;} 
void sety2 (int a){y2=a;}
int getx1 () {return x1;} 
int gety1 () {return y1;} 
int getx2 () {return x2;} 
int gety2 () {return y2;} 
float racunajDuzinu(){ d=sqrt(pow(x2-x1, 2)+ pow(y2-y1,2)); 
return sqrt(pow(x2-x1, 2)+ pow(y2-y1,2)); } 
void ispis (){ cout << "Prava: (" << x1 << ", " << y1 << ") - (" << x2 << " ," << y2 << ") " << endl; } };
class kvadrat { 
private: prava vrh, dno; 
public: 
kvadrat(){ 
vrh.setx1(1); vrh.sety1(1); vrh.setx2(2); vrh.sety2(2); dno.setx1(3); dno.sety1(3); dno.setx2(4); dno.sety2(4); } 
kvadrat(prava po1, prava po2){ 
vrh.setx1(po1.getx1()); vrh.sety1(po1.gety1()); vrh.setx2(po1.getx2()); vrh.sety2(po1.gety2()); dno.setx1(po2.getx1()); dno.sety1(po2.gety1()); dno.setx2(po2.getx2()); dno.sety2(po2.gety2()); }
float povrsina (){
return pow(vrh.racunajDuzinu(), 2); } 
float obim() { 
return 4*vrh.racunajDuzinu(); } 
void ispis (){ 
cout << "Povrsina=" << povrsina() << " Obim=" << obim() << endl; } };
int main() 
{ 
prava po1(0,10,10,10), po2; 
kvadrat ko1(po1, po2); 
ko1.ispis(); 
return 0; 
}*/